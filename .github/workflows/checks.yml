name: Checks

on: push

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.15'
  LOG_LEVEL: 'SILENCE'


jobs:
  setup:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: node-modules-cache-node-${{ env.NODE_VERSION }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts


  scan:
    runs-on: ubuntu-22.04
    name: Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan
        run: |
          export TRIVY_VERSION="0.54.1"
          wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
          echo "Scanning filesystem"
          ./trivy filesystem .

  lint:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: node-modules-cache-node-${{ env.NODE_VERSION }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Lint
        run: npm run lint

  test:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: node-modules-cache-node-${{ env.NODE_VERSION }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Test
        run: npm test

  build_and_push:
    name: Build Image
    runs-on: ubuntu-22.04
    #needs: ["test", "lint"]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2 #${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/github-oidc #${{ secrets.AWS_ROLE }}
          role-session-name: ${{ github.run_id }}
          output-credentials: true

      - name: Amazon ECR Login
        uses: aws-actions/amazon-ecr-login@v1.3.0

      - name: Build Docker Image
        env:
          IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}.${{ env.SHORT_SHA }}
        run: |
          echo "Build image for $(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)"
          REGISTRY=${{ steps.login-ecr.outputs.registry }} >> $GITHUB_ENV
          BRANCH_NAME=$(echo BRANCH_NAME=${GITHUB_REF#refs/heads/}) >> $GITHUB_ENV
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8) >> $GITHUB_ENV
          REPO_NAME=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2) >> $GITHUB_ENV
          docker build -t "${REGISTRY}/:${REPO_NAME}:${BRANCH_NAME}-${SHORT_SHA}" -f kube/Dockerfile.app .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker Image
        env:
          IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}.${{ env.SHORT_SHA }}
          REGISTRY: ${{ env.REGISTRY }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
          SHORT_SHA: ${{ env.SHORT_SHA }}
          REPO_NAME: ${{ env.REPO_NAME }}
        run: |
          echo "Push image to ECR"
          docker push "${REGISTRY}/:${REPO_NAME}:${BRANCH_NAME}-${SHORT_SHA}"

    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}

  #Deploy:
  #  name: Deploy
  #  runs-on: ubuntu-latest
  #  needs: [build_image_and_push]
  #  steps:
  #    - name: Install Dependencies
  #      run: |
  #        sudo apt update -y && sudo apt install jq wget -y
  #        sudo wget https://github.com/mikefarah/yq/releases/download/v4.24.2/yq_linux_amd64 -O /usr/bin/yq &&
  #        sudo chmod +x /usr/bin/yq
  #
  #    - name: Clone Infrastructure Repository
  #      uses: GuillaumeFalourd/clone-github-repo-action@v2
  #      with:
  #        owner: 'NexusMutual'
  #        repository: 'infrastructure'
  #        access-token: ${{ secrets.HELM_GITHUB_TOKEN  }}
  #
  #    - name: Update Tag in Helm Values for Infrastructure
  #      env:
  #        REGISTRY=${{ env.REGISTRY }}
  #        BRANCH_NAME=${{ env.BRANCH_NAME }}
  #        SHORT_SHA=${{ env.SHORT_SHA }}
  #        REPO_NAME=${{ env.REPO_NAME }}
  #      run: |
  #          cd infrastructure/argocd/values/application/${REPO_NAME} &&  yq -i '.${REPO_NAME}.image.tag = "'$IMAGE_TAG'" ' values.yaml
  #          git config --global user.email "devops@cloudhero.io"
  #          git config --global user.name "CloudHero"
  #          git add .
  #          git commit --allow-empty -m "updated image tag to ${SHORT_SHA}"
  #          git push origin main
